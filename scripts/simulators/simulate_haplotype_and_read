#! /usr/bin/python3

from subprocess import *
import os
import sys
import argparse
import logging
from Bio import SeqIO

ROOT_DIR="/mnt/ec/ness/yolkee/thesis"
TOOLS_DIR=f"{ROOT_DIR}/tools"

def run_cmd(cmd : list, wait_to_finish = True):
  logging.info(f"Run command: {' '.join(cmd)}")
  if not wait_to_finish:
    p = Popen(cmd, stdout=PIPE)
    return p
  else:
    p = run(cmd, stdout=PIPE)
    if p.returncode != 0:
      logging.error(f"cmd = {' '.join(cmd)} failed!")
      exit(-1)


def main():
  logging.basicConfig(level=logging.DEBUG, format="[%(asctime)s %(levelname)s] %(message)s")
  parser = argparse.ArgumentParser(prog="simulate_haplotype_and_read",
                                   description="Simulate SNP genome by simuG and pbsim")
  parser.add_argument("-r", "--ref",
                      dest="ref", type=str,
                      required=True,
                      help="Path of reference genome that used to introduce SNPs")
  parser.add_argument("-c", "--haplotype",
                      dest="haplotype", type=int,
                      default=1,
                      help="Number of haplotypes, indicate how many runs for simuG")
  parser.add_argument("--ratio", 
                      dest="ratio", type=float,
                      default=0.01,
                      help="SNP and indel ratio to introduce for simuG")
  parser.add_argument("-t", "--threads",
                      dest="threads", type=int,
                      default=1,
                      help="Number of threads to use for minimap2")
  parser.add_argument("-m", "--method",
                      dest="method", type=str,
                      required=True,
                      choices=["QS", "ERR"])
  parser.add_argument("-l", "--min_length", 
                      dest="length", type=int,
                      default=100,
                      help="minimum length of simulated reads")
  parser.add_argument("-o",
                      dest="output_dir", type=str,
                      required=True,
                      help="directory of output file")

  args = parser.parse_args(sys.argv[1:])

  simuG_dir = f"{TOOLS_DIR}/simulator/simuG"
  simuG = f"{simuG_dir}/simuG.pl"
  pbsim_dir = f"{TOOLS_DIR}/simulator/pbsim3"
  pbsim = f"{pbsim_dir}/src/pbsim"

  # simuG paramter
  ref = args.ref
  haplotype = args.haplotype
  ratio = args.ratio
  
  ref_len = len(SeqIO.read(ref, "fasta").seq)
  snp_count = int(ratio * ref_len)
  indel_count = int(ratio * ref_len * 0.2)

  # pbsim parameter
  output_dir = args.output_dir
  model_dir = f"{pbsim_dir}/data"
  models = {
    "QS": {
      "PacBio": "QSHMM-RSII.model",
      "ONT": "QSHMM-ONT.model",
      "ONT-HQ": "QSHMM-ONT-HQ.model"
    },
    "ERR": {
      "PacBio-RSII": "ERRHMM-RSII.model",
      "PacBio-SEQUEL": "ERRHMM-SEQUEL.model",
      "ONT": "ERRHMM-ONT.model",
      "ONT-HQ": "ERRHMM-ONT-HQ.model"
    }
  }
  min_length = args.length

  # minimap2 threads
  threads = args.threads

  if not os.path.exists(ref) or not os.path.isfile(ref):
    logging.error(f"Reference genome {ref} not exists or not a file.")
    exit(-1)
  if haplotype < 1:
    logging.error(f"Haplotype count must greater than 1.")
    exit(-1)
  if snp_count < 0:
    logging.error(f"SNP count must greater than 0.")
    exit(-1)
  if indel_count < 0:
    logging.error(f"Indel count must greater than 0.")
    exit(-1)
  if threads < 1:
    logging.error(f"Threads must greater than 1.")
    exit(-1)
  
  # run simuG for each haplotype
  snp_ref_dir = f"{output_dir}/snp_ref"
  os.makedirs(snp_ref_dir, exist_ok=True)
  simuG_proc = []
  for h in range(haplotype):
    pref = f"{snp_ref_dir}/h{h + 1}"
    simuG_cmd = [
      "perl",
      simuG,
      "-r", f"{ref}",
      "-snp_count", f"{snp_count}",
      "-indel_count", f"{indel_count}",
      "-prefix", f"{pref}"
    ]
    if threads > 1:
      simuG_proc.append(run_cmd(simuG_cmd, False))
    else:
      run_cmd(simuG_cmd)

  if len(simuG_proc) > 0:
    for proc in simuG_proc:
      proc.wait()
  
  # run pbsim for each haplotype
  reads_dir = f"{output_dir}/reads"
  depths = [10, 20, 30]
  os.makedirs(reads_dir, exist_ok=True)
  for platform, model in models[args.method].items():
    method = f"{args.method.lower()}hmm"
    for h in range(haplotype):
      genome = f"{snp_ref_dir}/h{h + 1}.simseq.genome.fa"
      for d in depths:
        pref = f"{reads_dir}/{platform}/D{d}"
        os.makedirs(pref, exist_ok=True)
        pbsim_cmd = [
          pbsim,
          "--strategy", "wgs",
          "--method", f"{method}",
          f"--{method}", f"{model_dir}/{model}",
          "--depth", f"{d}",
          "--genome", f"{genome}",
          "--id-prefix", f"{h}",
          "--prefix", f"{pref}/h{h + 1}"
        ]
        # if min_length > 0:
        #   pbsim_cmd += ["--length-min", f"{min_length}"]
        run_cmd(pbsim_cmd)

  # use seqkit to merge reads
  for platform in models[args.method].keys():
    for d in depths:
      pref = f"{reads_dir}/{platform}/D{d}"
      merged_reads = f"{pref}/merged_reads.fastq"
      reads = []
      for h in range(haplotype):
        for record in SeqIO.parse(f"{pref}/h{h + 1}_0001.fastq", "fastq"):
          reads.append(record)
      reads.sort(key=lambda x: x.id)
      SeqIO.write(reads, merged_reads, "fastq")
      # seqkit_cmd = [
      #   "seqkit",
      #   "concat",
      #   "-f", # full
      #   "-o", merged_reads,
      # ]
      # seqkit_cmd += [f"{pref}/h{h + 1}_0001.fastq" for h in range(haplotype)]
      # run_cmd(seqkit_cmd)

  # generate perfect read
  for platform in models[args.method].keys():
    for d in depths:
      pref = f"{reads_dir}/{platform}/D{d}"
      for h in range(haplotype):
        genome = f"{snp_ref_dir}/h{h + 1}.simseq.genome.fa"
        maf2fa_cmd = [
          "/mnt/ec/ness/yolkee/thesis/build/maf2fa",
          "-r", f"{genome}",
          "-m", f"{pref}/h{h + 1}_0001.maf",
          "-o", f"{pref}/h{h + 1}_perfect.fasta"
        ]
        run_cmd(maf2fa_cmd)

  # use seqkit to merge perfect read
  for platform in models[args.method].keys():
    for d in depths:
      pref = f"{reads_dir}/{platform}/D{d}"
      merged_reads = f"{pref}/merged_perfect_reads.fasta"
      reads = []
      for h in range(haplotype):
        for record in SeqIO.parse(f"{pref}/h{h + 1}_perfect.fasta", "fasta"):
          reads.append(record)
      reads.sort(key=lambda x: x.id)
      SeqIO.write(reads, merged_reads, "fasta")
      # seqkit_cmd = [
      #   "seqkit",
      #   "concat",
      #   "-f", # full
      #   "-o", merged_reads,
      # ]
      # seqkit_cmd += [f"{pref}/h{h + 1}_perfect.fasta" for h in range(haplotype)]
      # run_cmd(seqkit_cmd)    
  
  # use minimap2 to generate overlap
  for platform in models[args.method].keys():
    for d in depths:
      pref = f"{reads_dir}/{platform}/D{d}"
      merged_reads = f"{pref}/merged_reads.fastq"
      overlap = f"{pref}/merged_reads.overlap.paf"
      if "PacBio" in platform:
        platform_str = "ava-pb"
      elif "ONT" in platform:
        platform_str = "ava-ont"
      minimap2_cmd = [
        "minimap2",
        "-x", f"{platform_str}",
        "--dual=yes",
        f"{merged_reads}",
        f"{merged_reads}",
        "-o", f"{overlap}",
        "-t", f"{threads}"
      ]
      run_cmd(minimap2_cmd)
  
if __name__ == "__main__":
  main()
